#+TITLE: My Emacs config
#+AUTHOR: Istvan Ladjanszki 
#+EMAIL: istvan.ladjanszki@gmail.com
#+LANGUAGE: en
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: This is my current Emacs config file in ~/.emacs.d/init.el 
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git

* What is this?
This is my personal Emacs configuraion file. The init.el can be extracted by invoking the command M-x org-babel-tangle
The org mode documentation for this can be found [[https://orgmode.org/manual/Extracting-source-code.html#Extracting-source-code][here]].

#+BEGIN_SRC emacs-lisp :tangle init.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This init.el file was generated from and org file using org mode
;; DO NOT MODIFIY THIS GENERATED VERSION
;; Modify the original instead and re-tangle
#+END_SRC

* Setting PATH 
Setting the path variable same as in the shell.
There are cases (e.g. if you use conda) when the shells PATH variable have to be used. But it can not seen from Emacs without importing it. 

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun set-exec-path-from-shell-PATH ()
        (interactive)
        (let ((path-from-shell (replace-regexp-in-string "^.*\n.*shell\n" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))
 
(set-exec-path-from-shell-PATH)
#+END_SRC

* Package repositories
I use more than one repository because Melpa stable is not as full as it was

#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'package)
#+END_SRC

** Melpa stable
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+END_SRC

** Elpy repository
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC

** Initalize them all
#+BEGIN_SRC emacs-lisp :tangle init.el
(package-initialize)
#+END_SRC

* Themes
My setup should use another few themes

** Subdirectory for the color themes
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC

** Subdued
#+BEGIN_SRC emacs-lisp :tangle init.el
(load-theme 'subdued t)
#+END_SRC
** Misterioso                                                                                                          :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(load-theme 'misterioso)
#+END_SRC
   
** Solarized                                                                                                           :ARCHIVE:
[[https://github.com/bbatsov/solarized-emacs][Github page]] of Solarized theme
#+BEGIN_SRC emacs-lisp :tangle no
;; make the fringe stand out from the background
(setq solarized-distinct-fringe-background t)

;; Don't change the font for some headings and titles
(setq solarized-use-variable-pitch nil)

;; make the modeline high contrast
(setq solarized-high-contrast-mode-line t)

;; Use less bolding
(setq solarized-use-less-bold t)

;; Use more italics
(setq solarized-use-more-italic t)

;; Use less colors for indicators such as git:gutter, flycheck and similar
(setq solarized-emphasize-indicators nil)

;; Don't change size of org-mode headlines (but keep other size-changes)
(setq solarized-scale-org-headlines nil)

;; Avoid all font-size changes
(setq solarized-height-minus-1 1.0)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)


(load-theme 'solarized t)

#+END_SRC
* Basics 
** At startup  
*** Inhibit splash screen
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq inhibit-splash-screen t)
#+END_SRC

*** Maximize Emacs
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Appearence

By default emacs has lots of useless UI elements, remove them to give more room for the actual edit buffers.

*** Disable the menu bar
#+BEGIN_SRC emacs-lisp :tangle init.el
(menu-bar-mode -1)
#+END_SRC

*** Disable the tool bar
#+BEGIN_SRC emacs-lisp :tangle init.el
(tool-bar-mode -1)
#+END_SRC

*** Disable the scroll bar
#+BEGIN_SRC emacs-lisp :tangle init.el
(toggle-scroll-bar -1)
#+END_SRC
** Cursor
*** No blinking cursor                                                                                                :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(blink-cursor-mode 0)
#+END_SRC

*** Underline current line                                                                                            :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline t)
#+END_SRC

*** Cursor color
#+BEGIN_SRC emacs-lisp :tangle init.el
(set-cursor-color "#00ff00")
#+END_SRC

** Mode line
Currently I do not use the modeline as much as I should

*** Display the cursor position
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC
** Paste from system clipboard
*** middle button selection
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq x-select-enable-primary t)
#+END_SRC
** Stop making backup files
Normally Emacs makes files with ending extended with a tilde ~

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq make-backup-files nil)
#+END_SRC

** Automatic line wrap
- Lines out of the screen can not be used
- This should be not used for source files only text

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-visual-line-mode t)
#+END_SRC

** Week starts on Monday
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq calendar-week-start-day 1)
#+END_SRC

** Smooth scrolling
By default Emacs jups by half screen

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq scroll-step 1)
#+END_SRC

** Highlight parentheses
I am not sure if the show-paren-delay does anything

#+BEGIN_SRC emacs-lisp :tangle init.el
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC

** Splitting horizontally by default
- By default Emacs splits vertically
- This setup is eyecandy for me
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq split-width-threshold nil)
#+END_SRC
** Super key
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'super) 
(setq w32-pass-rwindow-to-system nil)
(setq w32-rwindow-modifier 'super)
#+END_SRC

** Hyper key                                                                                                           :ARCHIVE:
Due to a bug in Ubuntu this does not work

#+BEGIN_SRC emacs-lisp :tangle no
(setq w32-pass-apps-to-system nil)
(setq w32-apps-modifier 'hyper)

(define-key key-translation-map (kbd "H-3") (kbd "•")) ; bullet
(define-key key-translation-map (kbd "H-4") (kbd "◇")) ; white diamond
(define-key key-translation-map (kbd "H-5") (kbd "†")) ; dagger
#+END_SRC

** Switching buffers
Fast way to switch between buffers and get the buffer menu

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "<s-right>") 'next-buffer)
(global-set-key (kbd "<s-left>") 'previous-buffer)
(global-set-key (kbd "<s-down>") 'buffer-menu)
#+END_SRC

** Resize windows
#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "M-<down>") 'enlarge-window)
(global-set-key (kbd "M-<up>") 'shrink-window)
(global-set-key (kbd "M-<left>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-<right>") 'shrink-window-horizontally)
#+END_SRC

* Emacs Lisp mode
** Shortcuts for Emacs Lisp major mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(progn 
    ;; Evaluate and pretty print the last expression
    (define-key emacs-lisp-mode-map (kbd "<C-return>") 'pp-eval-last-sexp) 
)
#+END_SRC
* Cryptography
** Loading the EasyPG crytography module                                                                               :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no 
(require 'epa-file)
(epa-file-enable)
#+END_SRC

** Using symmetric encryptation                                                                                        :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(setq epa-file-select-keys -1)
#+END_SRC

* Evil
Evil is a vim emulator for Emacs.
** Loading Evil
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'evil)
(evil-mode 1)
#+END_SRC

** Custom ex commands
*** Kill current buffer (q)
By default the ex command q quits emacs 
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "q" 'kill-this-buffer)
#+END_SRC

*** Quit Emacs (quit)
You have to type the full thing to make it sure
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "quit" 'evil-quit)
#+END_SRC

*** Write and kill buffer (wq)
To emulate the save and close function of wq 
Vim can be used like this when files are opened in tabs

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun borneo/save-and-kill-buffer (arg)
  (interactive "p")
  (save-buffer)
  (kill-this-buffer))

(evil-ex-define-cmd "wq" 'borneo/save-and-kill-buffer)
#+END_SRC

*** Org refile (re) 
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "re" 'org-refile)
#+END_SRC

*** Org copy subtree (xy)
This is only convenient because x and y are close on the keyboad
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "xy" 'org-copy)
#+END_SRC

*** Org toggle archive tag (ar)
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "ar" 'org-toggle-archive-tag)
#+END_SRC

*** Org set property (pp)
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "pp" 'org-set-property)
#+END_SRC

*** Org set tags tags (ta)
#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-ex-define-cmd "ta" 'org-set-tags)
#+END_SRC

* Org mode 
Org mode is an organizer tool originally built on layout mode.

** Loading Org mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'org)
#+END_SRC

** Start logging
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-log-done t)
#+END_SRC

** Exporting
Adding archived subtrees to exports. This is useful because I store DONE and CANCELLED tasks in an internal archive.
Having this internal archive in the export is useful to know what is DONE and is not.

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-export-with-archived-trees t) 
#+END_SRC
** Agenda 
*** Shortcut for the org agenda dispatcher
#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC
*** Agendas into full frame 

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-agenda-window-setup 'only-window)
#+END_SRC

*** Org mode agenda files
I use for agenda files all files in the org root directory. The files in the directory org/reference are not in this on purpose.
**** All files from the directory
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-agenda-files (list "~/PROJECTS/org/"))
#+END_SRC

**** Files in a list one by one                                                                                      :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-files
  '("~/PROJECTS/org/naplo.org.gpg" 
    "/home/borneo/PROJECTS/org/bookmarks.org" 
    "/home/borneo/PROJECTS/org/inbox.org" 
    "/home/borneo/PROJECTS/org/projects.org" 
    "/home/borneo/PROJECTS/org/reference.org"  
    "/home/borneo/PROJECTS/org/someday.org"))
#+END_SRC
*** Custom agenda views
For writing custom agenda commands the help page of org-agenda-skip-if funciton is very helpful.
In Emacs M-x describe-function RET org-agenda-skip-if should be invoked
**** Custom agenda commands                                                                                          :ARCHIVE:
There are currently three custom agenda commands I use
- All "NEXT" tasks
- All "WAITING" tasks
- Full daily agenda (under construction)
  The code for the full daily agenda comes from [[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][this]] tutorial which is an exceptional information source on org-mode and Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-custom-commands '(
  ("n" "In NEXT State" todo "NEXT" ((org-agenda-overriding-header "Next steps")))
  ("w" "In WAITING State" todo "WAITING" ((org-agenda-overriding-header "Delegated and/or Waiting")))

  ("F" "My daily block agenda" (
    (agenda "" (
      (org-agenda-span 1)
      ;;(org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("SCHEDULED" "RECURRING")))
      (org-agenda-overriding-header "Daily Tasks")
    )) 
    (todo "NEXT" ((org-agenda-overriding-header "Next steps")))
    (todo "WAITING" ((org-agenda-overriding-header "Delegated and/or Waiting"))))
    ((org-agenda-compact-blocks t)))

  ("hd" "Daily tasks     " (
    (agenda "" (
      (org-agenda-span 1)
      ;;(org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("SCHEDULED" "RECURRING")))
      (org-agenda-overriding-header "Daily Tasks")
    ))
  ))

  ("ho" "Home and Family " tags-todo "@otthon|#Berni" ((org-agenda-overriding-header "Home and Family")))
  ;;("hh" "Másnapig        " tags-todo "Overnight" ((org-agenda-overriding-header "Taszkok holnap munkakezdésig")))
  ("hc" "Corvinus        " tags-todo "@corvinus" ((org-agenda-overriding-header "Corvinus")))
  ("hn" "Overnight       " tags-todo "Overnight" ((org-agenda-overriding-header "Overnight tasks")))
  ("hf" "Finished        " todo "DONE|CANCELLED" ((org-agenda-overriding-header "Finished")))
))
#+END_SRC

**** Weekly agenda in full frame                                                                                     :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
;; Open agenda wiev and close all other windows (after org is fully configured) 
(defun borneo/daily-agenda-in-full-frame (arg)
  (interactive "p")
  ;;(org-agenda-list)
  (org-agenda arg "F")
  (delete-other-windows))

(global-set-key (kbd "<f1>") 'borneo/daily-agenda-in-full-frame)
#+END_SRC

**** "NEXT" tasks in full frame                                                                                      :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(defun borneo/next-in-full-frame (arg)
  (interactive "p")
  (org-agenda arg "n")
  (delete-other-windows))

(global-set-key (kbd "<f2>") 'borneo/next-in-full-frame)
#+END_SRC

**** "WAITING" tasks in full frame                                                                                   :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
;; Open all WAITING tasks
(defun borneo/waiting-in-full-frame (arg)
  (interactive "p")
  (org-agenda arg "w")
  (delete-other-windows))

;; Define a global key to invoke 
(global-set-key (kbd "<f3>") 'borneo/waiting-in-full-frame)
#+END_SRC

**** Cusom agenda commands
In the previous version the list containig the org agenda commands were so long that I had to find another way.
First I assign an empty list then append the commands one-by-one

Assign empty list to org-agenda-custom-commands
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-agenda-custom-commands nil)
#+END_SRC

***** All tasks in the state "NEXT"
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("n" "In NEXT State" todo "NEXT" ((org-agenda-overriding-header "Next steps")))
	     t) 
#+END_SRC

***** All tasks in the state "WAITING"
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("w" "In WAITING State" todo "WAITING" ((org-agenda-overriding-header "Delegated and/or Waiting")))
	     t)
#+END_SRC

***** Tag searches 
****** All tasks related to home and my wife :)
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("ho" "Home and Family " tags-todo "@otthon|#Berni" ((org-agenda-overriding-header "Home and Family")))
	     t)
#+END_SRC

****** Context agenda for university
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("hc" "Corvinus        " tags-todo "@corvinus" ((org-agenda-overriding-header "Corvinus")))
	     t)
#+END_SRC

****** AFK Agenda 1 (one of them should be eliminated)
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("hn" "Overnight       " tags-todo "Overnight" ((org-agenda-overriding-header "Overnight tasks")))
	     t)
#+END_SRC

****** AFK Agenda 2 
I usually email this to myself the last thing in the evening
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("hh" "Másnapig        " tags-todo "Overnight" ((org-agenda-overriding-header "Taszkok holnap munkakezdésig")))
	     t)
#+END_SRC

***** "TODO" State searches
***** Finished tasks
#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-to-list 'org-agenda-custom-commands
               '("hf" "Finished        " ((todo "DONE" ((org-agenda-overriding-header "DONE")))
                                          (todo "CANCELLED" ((org-agenda-overriding-header "CANCELLED"))))
                 ((org-agenda-compact-blocks t)))
                 t)
#+END_SRC

***** Block agenda to work from
#+BEGIN_SRC emacs-lisp :tangle init.el
  (add-to-list 'org-agenda-custom-commands
               '("F" "My daily block agenda" ((agenda "" ((org-agenda-span 1)
                                                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("SCHEDULED" "RECURRING")))
                                                          (org-agenda-overriding-header "Daily Tasks")))
                                              (todo "NEXT" ((org-agenda-overriding-header "Next steps")))
                                              (todo "WAITING" ((org-agenda-overriding-header "Delegated and/or Waiting"))))
                 ((org-agenda-compact-blocks t)))
               t)
#+END_SRC

***** Testing
****** All tasks that has timestamp but not recurring nor scheduled
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("Xa" "TESTING" alltodo "" ((org-agenda-overriding-header "Testing2")
					 (org-agenda-entry-types '(:timestamp))
					 (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo
											      '("SCHEDULED" "RECURRING")))))
	     t)
#+END_SRC

****** Overdue tasks
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("Xb" "TESTING" tags-todo "+TIMESTAMP<\"<now>\"" ((org-agenda-overriding-header "Overdue")))
	     t)
#+END_SRC

****** All tasks with timestamps
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
	     '("Xc" "TESTING" alltodo "" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottimestamp))
					 (org-agenda-overriding-header "All timestamps")))
	     t)
#+END_SRC

****** Example org-super-agenda
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-agenda-custom-commands
             '("Xd" "TESTING"
               ((agenda "" ((org-agenda-span 'day)
			    (org-super-agenda-groups '(
						       (:name "Recurring" :todo "RECURRING")
						       ))
			    )))))
#+END_SRC

**** Testing the org-agenda-skip-function                                                                            :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
 (defun my-skip-unless-waiting ()
   "Skip trees that are not waiting"
   (let ((subtree-end (save-excursion (org-end-of-subtree t))))
     (if (re-search-forward ":waiting:" subtree-end t)
 	nil          ; tag found, do not skip
       subtree-end))) ; tag not found, continue after end of subtree
 (add-to-list 'org-add-agenda-custom-command
 	     '("b" todo "PROJECT"
 	       ((org-agenda-skip-function 'my-skip-unless-waiting)
 		(org-agenda-overriding-header "Projects waiting for something: "))))

#+END_SRC

**** Keystrokes for the common agenda commands
Sometimes it is easier to have a one button keystroke for agendas than go through the agenda dispatcher

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "<f1>") (kbd "C-c a F"))
(global-set-key (kbd "<f2>") (kbd "C-c a n"))
(global-set-key (kbd "<f3>") (kbd "C-c a w"))
;;(global-set-key (kbd "<f12>") (kbd "C-c a X"))
#+END_SRC

** Tags
*** Align tags (flusleft)
Aligning the tasks both in the tree and agenda view 

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-agenda-tags-column 120)
(setq org-tags-column 120)
#+END_SRC

*** Align tags (flushright)                                                                                           :ARCHIVE:
Aligning the tasks both in the tree and agenda view 

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-tags-column -120)
(setq org-tags-column -120)
#+END_SRC

*** List of the tags I use                                                                                            :ARCHIVE:
Currently I use the tags from the files since it is more easily configurable and in the org files the way tags can be set up is 
much more conventient.

#+BEGIN_SRC emacs-lisp :tangle no
;; Org tags list
(setq org-tag-alist '(("@otthon") ("@iroda") ("@corvinus") ("@elte") ("@gyuli") ("@kecskemet") ("@vachartyan") ("@QChem")
		     ("#CzetenyiBeni") ("#TornaiGabor") ("#Dzsi") ("#RakAdam") ("#IllesJozsi") ("#CsereyGyuri")
		     ("#Berni")
		     ("Gmail")
		     ("NVIDIA")
		     ))
#+END_SRC

*** Aligning tags                                                                                                     :ARCHIVE:
This is not used currently

#+BEGIN_SRC emacs-lisp :tangle no
;; Flush org tags to the right using the window width
;;(add-hook 'focus-in-hook 
;;  (lambda () (progn 
;;    (setq org-tags-column (- 5 (window-body-width)))) (org-align-all-tags)))
;;
;;(add-hook 'focus-out-hook 
;;  (lambda () (progn 
;;    (setq org-tags-column (- 5 (window-body-width)))) (org-align-all-tags)))
#+END_SRC

*** Align tags in a different way                                                                                     :ARCHIVE:
This is un-tested should not be used

#+BEGIN_SRC emacs-lisp :tangle no
TODO Proper way to position tags
Place tags close to the right-hand side of the window
(add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
(defun place-agenda-tags ()
  "Put the agenda tags by the right border of the agenda window."
  (setq org-agenda-tags-column (- 4 (window-width)))
  (org-agenda-align-tags))
#+END_SRC
** Capture 
*** Capture file
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-default-notes-file "~/PROJECTS/org/inbox.org")
#+END_SRC

*** Capture shortcut
This should be changed to somthing shorter

#+BEGIN_SRC emacs-lisp :tangle init.el
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

*** Capture template definitions
Since I have a lot of templates I do the same trick as I do when adding the agenda commands.
To the capture templates variable I assign an empty list then append the capture templates one by one.
**** Setup empty list
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-capture-templates nil)
#+END_SRC

**** Template for TODO
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-capture-templates '("t" 
                                      "Todo" 
                                      entry (file org-default-notes-file) "* TODO %i%?"))
#+END_SRC

**** Template for NOTE
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'org-capture-templates '("n" 
                                      "Note" 
                                       entry (file org-default-notes-file) "* %i%?"))
#+END_SRC

**** Tickler                                                                                                         :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("T" "Tickler" entry (file+headline "~/gtd/tickler.org" "Tickler") "* %i%? \n %U")
#+END_SRC

**** Todo                                                                                                            :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("t" "Todo" entry (file "~/Work/Org/Refile.org") "* TODO %?\n%U" :empty-lines 1)
#+END_SRC

**** Todo with clipboard                                                                                             :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("T" "Todo with Clipboard" entry (file "~/Work/Org/Refile.org") "* TODO %?\n%U\n   %c" :empty-lines 1)
#+END_SRC

**** Note with clipboard                                                                                             :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("N" "Note with Clipboard" entry (file "~/Work/Org/Refile.org") "* NOTE %?\n%U\n   %c" :empty-lines 1)
#+END_SRC

**** Event                                                                                                           :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("e" "Event" entry (file+headline "~/Work/Org/Events.org" "Transient") "* EVENT %?\n%U" :empty-lines 1)
#+END_SRC

**** Event with clipboard                                                                                            :ARCHIVE:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-capture-templates '("E" "Event With Clipboard" entry (file+headline "~/Work/Org/Events.org" "Transient") "* EVENT %?\n%U\n   %c" :empty-lines 1))
#+END_SRC
 
** Refile
*** Target files
+ [2018-11-18] I use at most two levels of categorization for my projects. Overstructuring my notes seems now not to lead to a good GTD worlflow.
Using only two levels also helps to avoid the clutter in the refile list. 

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
#+END_SRC

*** How to set the refile target 
nil value means complete the target in one step

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

*** What to use in refile target
- 'file means the refile target should contain the file name as well
- It can be choosen to have the full path as well 

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-refile-use-outline-path 'file)
#+END_SRC

*** Allowing to refile as main headline
In this way the refiled headline can be first header in the target file

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
** Structure editing
*** Do not split the headline before inserting headline
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-M-RET-may-split-line nil)
#+END_SRC
** "TODO" labels
*** Keywords
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-todo-keywords '((sequence "NEW" "TODO" "NEXT" "SCHEDULED" "RECURRING" "WAITING" "NOTE" "|" "DONE" "CANCELLED")))
#+END_SRC

*** Faces
+ To set the faces the following keywords can be used in the list
  - :foreground
  - :background
  - :weight
+ To list the colors Emacs can display invoke the 
  - M-x list-colors-theme command

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-todo-keyword-faces '(
    ("NEW" :foreground "light salmon" :weight bold)
    ("TODO" :foreground "magenta3" :weight bold)
	  ("NEXT" :foreground "yellow" :weight bold)
	  ("SCHEDULED" :foreground "dodger blue" :weight bold)
	  ("RECURRING" :foreground "deep pink" :weight bold)
	  ("WAITING" :foreground "purple" :weight bold)
	  ("NOTE" :foreground "firebrick" :weight bold)
	  ("DONE" :foreground "green3" :weight bold)
	  ("CANCELLED" :foreground "orange red" :weight bold)
))
#+END_SRC
** Archive to sibling by one button
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-archive-sibling-heading "Finished")
(global-set-key (kbd "<f8>") 'org-archive-to-archive-sibling)
#+END_SRC

** Look of the org file

*** Headlines should be indented
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-startup-indented t)
#+END_SRC

*** Stars should be hided
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Stars should be hided
(setq org-hide-leading-stars t)
#+END_SRC

** Proiorities
There are five priorites I currently use

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-highest-priority ?A)
(setq org-lowest-priority ?E)
(setq org-default-priority ?C)
#+END_SRC

** Syntax highlight in source code blocks 
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq org-src-fontify-natively t)
#+END_SRC

** Change the layout of the org buffer                                                                                 :ARCHIVE:
It does not work somehow

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-prefix-format '((agenda . "%-12c%?-12t% s") (timeline . "% s") (todo . "%-12c") (tags . "%-12c") (search . "%-12c")))
(setq org-agenda-prefix-format '((timeline . "% s") (todo . "%-12c") (tags . "%-12c") (search . "%-12c")))
#+END_SRC
** Format for column view                                                                                              :ARCHIVE:
No colors, it is ugly
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-overriding-columns-format "%TODO %7EFFORT %PRIORITY     %100ITEM 100%TAGS")
#+END_SRC

* ESS                                                                                                                   :ARCHIVE:
This part is for R development with ESS. I am not a big fan pf RStudio
A [[ftp://ess.r-project.org/ESS/ESS_html-o/ess_12.html][website]] about customizing R.
In the current install ESS is not in use so no tangle happens

** Mode dependent key definitions

#+BEGIN_SRC emacs-lisp :tangle no 
(progn 
    ;; Evaluate whole buffer 
    (define-key ess-mode-map (kbd "<f9>") 'ess-eval-buffer) 
)
#+END_SRC

* Deft                                                                                                                  :ARCHIVE:
+ [2018-11-01] Deft is a note taking tool. It can be used as a reference system in the GTD methodology
+ [2018-11-18] In my current setup I do not use Deft. It is a very good tool but as I start my journey in the GTD worls I find it mostly distracting.
  Currently I have all my references in one file and it is still under 10.000 lines which is small compared to the limits of Org and Emacs.
  The advantage to have everything in one file is greater then having a separate tool for note taking.

** Loading Deft
#+BEGIN_SRC emacs-lisp :tangle no
(require 'deft)
#+END_SRC

** Base directory
#+BEGIN_SRC emacs-lisp :tangle no
;; Base deft directory
(setq deft-directory "~/PROJECTS/org/reference/")
#+END_SRC

** Files to use with Deft
#+BEGIN_SRC emacs-lisp :tangle no
;; Files to use with deft
(setq deft-extensions '("org"))
#+END_SRC

** Extension and parsing
#+BEGIN_SRC emacs-lisp :tangle no
(setq deft-default-extension "org")
(setq deft-text-mode 'org-mode)
#+END_SRC

** Naming new files
Use the search string to generate file name

#+BEGIN_SRC emacs-lisp :tangle no
(setq deft-use-filename-as-title t)
(setq deft-use-filter-string-for-filename t)
(setq deft-auto-save-interval 0)
#+END_SRC

** Key to launch deft
#+BEGIN_SRC emacs-lisp :tangle no
(global-set-key (kbd "<f4>") 'deft)
#+END_SRC
* LaTeX mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq tex-fontify-script nil)
#+END_SRC
* Flyspell
Flyspell is for spell checking in text mode 
** Enabling

#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'flyspell)
(flyspell-mode t)
#+END_SRC

** LaTeX mode
Force ispell minor mode in LaTeX major mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'LaTeX-mode-hook '(flyspell-mode t))
#+END_SRC
*** TODO Add LaTeX mode to have a mode hook
Since I currently do not use any LaTeX mode there is no mode hook.
The flyspell mode should be triggered by file ending or by a LaTeX mode install 
** Global shortcut

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "<C-f9>") 'flyspell-buffer)
#+END_SRC
* Elpy
Elpy is a good package to transform Emacs into a Python IDE

** Enabling

#+BEGIN_SRC emacs-lisp :tangle init.el
(elpy-enable)
#+END_SRC

** Configuration
*** Python interpreter 
Using Python 3.7 from the local Anaconda installation
This sould not be confused with the Python shell.
The interpreter is the actual virtual machine running Python code

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq elpy-rpc-python-command "/home/borneo/anaconda3/bin/python3")
#+END_SRC

*** Autompletion 
**** Using Jedi as the backend for autocompletion

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq elpy-rpc-backend "jedi")
#+END_SRC

**** Start completing after n characters
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq company-minimum-prefix-length 1)
#+END_SRC

*** IPython shell
The shell used above the Python virtual machine.
Also the coloring and other fancy graphical features should be disabled.
 
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

*** Shortcuts

**** Send whole buffer to python interpreter 

#+BEGIN_SRC emacs-lisp :tangle init.el 
(local-unset-key "<C-S-return>")
(define-key elpy-mode-map (kbd "<C-S-return>") 'elpy-shell-send-buffer) 
#+END_SRC

**** Send actual expression to interpreter

#+BEGIN_SRC emacs-lisp :tangle init.el 
(local-unset-key "<C-return>")
(define-key elpy-mode-map (kbd "<C-return>") 'elpy-shell-send-statement) 
#+END_SRC

* Helm 
** Loading Helm
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'helm-config)
(helm-mode 1)
#+END_SRC

* Autogenerated
This section should not be modified by hand

** Custom set variables
#+BEGIN_SRC emacs-lisp :tangle init.el
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("8bd35dc1843ca4f0ddf0a56e0f1a02b71af49ca3c68a075a27a53e4f3bd431f6" default)))
 '(package-selected-packages
   (quote
    (deft ess markdown-mode+ helm spike-theme solarized-theme markdown-mode gruber-darker-theme groovy-mode evil))))
#+END_SRC

** Custom set faces
#+BEGIN_SRC emacs-lisp :tangle init.el
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(hl-line ((t (:inherit highlight :underline nil :width ultra-expanded)))))
#+END_SRC





